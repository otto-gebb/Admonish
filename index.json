{
  "api/Admonish.DateTimeValidationExtensions.html": {
    "href": "api/Admonish.DateTimeValidationExtensions.html",
    "title": "Class DateTimeValidationExtensions | Admonish validation library",
    "keywords": "Class DateTimeValidationExtensions Namespace Admonish Assembly Admonish.dll Contains date and time related validation extension methods of ValidationResult. public static class DateTimeValidationExtensions Inheritance object DateTimeValidationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Between(ValidationResult, string, DateTime, DateTime, DateTime, string?) Ensures that the specified date is within the specified range (inclusive). When the check fails, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult Between(this ValidationResult r, string key, DateTime value, DateTime minValue, DateTime maxValue, string? message = null) Parameters r ValidationResult The validation result. key string The key to associate the error with. value DateTime The date to check. minValue DateTime The minimum allowed value. maxValue DateTime The maximum allowed value. message string An optional error message. Returns ValidationResult The validation result. Between(ValidationResult, string, DateTimeOffset, DateTimeOffset, DateTimeOffset, string?) Ensures that the specified date is within the specified range (inclusive). When the check fails, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult Between(this ValidationResult r, string key, DateTimeOffset value, DateTimeOffset minValue, DateTimeOffset maxValue, string? message = null) Parameters r ValidationResult The validation result. key string The key to associate the error with. value DateTimeOffset The date to check. minValue DateTimeOffset The minimum allowed value. maxValue DateTimeOffset The maximum allowed value. message string An optional error message. Returns ValidationResult The validation result. Max(ValidationResult, string, DateTime, DateTime, string?) Ensures that the specified date is less than or equal to the specified value. When the check fails, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult Max(this ValidationResult r, string key, DateTime value, DateTime maxValue, string? message = null) Parameters r ValidationResult The validation result. key string The key to associate the error with. value DateTime The date to check. maxValue DateTime The maximum allowed value. message string An optional error message. Returns ValidationResult The validation result. Max(ValidationResult, string, DateTimeOffset, DateTimeOffset, string?) Ensures that the specified date is less than or equal to the specified value. When the check fails, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult Max(this ValidationResult r, string key, DateTimeOffset value, DateTimeOffset maxValue, string? message = null) Parameters r ValidationResult The validation result. key string The key to associate the error with. value DateTimeOffset The date to check. maxValue DateTimeOffset The maximum allowed value. message string An optional error message. Returns ValidationResult The validation result. Min(ValidationResult, string, DateTime, DateTime, string?) Ensures that the specified date is greater than or equal to the specified value. When the check fails, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult Min(this ValidationResult r, string key, DateTime value, DateTime minValue, string? message = null) Parameters r ValidationResult The validation result. key string The key to associate the error with. value DateTime The date to check. minValue DateTime The minimum allowed value. message string An optional error message. Returns ValidationResult The validation result. Min(ValidationResult, string, DateTimeOffset, DateTimeOffset, string?) Ensures that the specified date is greater than or equal to the specified value. When the check fails, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult Min(this ValidationResult r, string key, DateTimeOffset value, DateTimeOffset minValue, string? message = null) Parameters r ValidationResult The validation result. key string The key to associate the error with. value DateTimeOffset The date to check. minValue DateTimeOffset The minimum allowed value. message string An optional error message. Returns ValidationResult The validation result."
  },
  "api/Admonish.EnumValidationExtensions.html": {
    "href": "api/Admonish.EnumValidationExtensions.html",
    "title": "Class EnumValidationExtensions | Admonish validation library",
    "keywords": "Class EnumValidationExtensions Namespace Admonish Assembly Admonish.dll Contains enum-related validation extension methods of ValidationResult. public static class EnumValidationExtensions Inheritance object EnumValidationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsDefined<TEnum>(ValidationResult, string, TEnum, string?) Ensures that the specified value is defined in the specified enum type. When the check fails, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult IsDefined<TEnum>(this ValidationResult r, string key, TEnum value, string? message = null) where TEnum : Enum Parameters r ValidationResult The validation result. key string The key to associate the error with. value TEnum The value to check. message string An optional error message. Returns ValidationResult The validation result. Type Parameters TEnum"
  },
  "api/Admonish.NumericValidationExtensions.html": {
    "href": "api/Admonish.NumericValidationExtensions.html",
    "title": "Class NumericValidationExtensions | Admonish validation library",
    "keywords": "Class NumericValidationExtensions Namespace Admonish Assembly Admonish.dll Contains numeric validation extension methods of ValidationResult. public static class NumericValidationExtensions Inheritance object NumericValidationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Between(ValidationResult, string, decimal, decimal, decimal, string?) Ensures that the specified number is within the specified range (inclusive). When the check fails, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult Between(this ValidationResult r, string key, decimal value, decimal minValue, decimal maxValue, string? message = null) Parameters r ValidationResult The validation result. key string The key to associate the error with. value decimal The number to check. minValue decimal The minimum allowed value. maxValue decimal The maximum allowed value. message string An optional error message. Returns ValidationResult The validation result. Between(ValidationResult, string, int, int, int, string?) Ensures that the specified number is within the specified range (inclusive). When the check fails, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult Between(this ValidationResult r, string key, int value, int minValue, int maxValue, string? message = null) Parameters r ValidationResult The validation result. key string The key to associate the error with. value int The number to check. minValue int The minimum allowed value. maxValue int The maximum allowed value. message string An optional error message. Returns ValidationResult The validation result. Max(ValidationResult, string, decimal, decimal, string?) Ensures that the specified number is less than or equal to the specified value. When the check fails, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult Max(this ValidationResult r, string key, decimal value, decimal maxValue, string? message = null) Parameters r ValidationResult The validation result. key string The key to associate the error with. value decimal The number to check. maxValue decimal The maximum allowed value. message string An optional error message. Returns ValidationResult The validation result. Max(ValidationResult, string, int, int, string?) Ensures that the specified number is less than or equal to the specified value. When the check fails, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult Max(this ValidationResult r, string key, int value, int maxValue, string? message = null) Parameters r ValidationResult The validation result. key string The key to associate the error with. value int The number to check. maxValue int The maximum allowed value. message string An optional error message. Returns ValidationResult The validation result. Min(ValidationResult, string, decimal, decimal, string?) Ensures that the specified number is greater than or equal to the specified value. When the check fails, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult Min(this ValidationResult r, string key, decimal value, decimal minValue, string? message = null) Parameters r ValidationResult The validation result. key string The key to associate the error with. value decimal The number to check. minValue decimal The minimum allowed value. message string An optional error message. Returns ValidationResult The validation result. Min(ValidationResult, string, int, int, string?) Ensures that the specified number is greater than or equal to the specified value. When the check fails, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult Min(this ValidationResult r, string key, int value, int minValue, string? message = null) Parameters r ValidationResult The validation result. key string The key to associate the error with. value int The number to check. minValue int The minimum allowed value. message string An optional error message. Returns ValidationResult The validation result."
  },
  "api/Admonish.ObjectValidationExtensions.html": {
    "href": "api/Admonish.ObjectValidationExtensions.html",
    "title": "Class ObjectValidationExtensions | Admonish validation library",
    "keywords": "Class ObjectValidationExtensions Namespace Admonish Assembly Admonish.dll Contains object validation extension methods of ValidationResult. public static class ObjectValidationExtensions Inheritance object ObjectValidationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Equal<T>(ValidationResult, string, T, T, string?) Ensures that the specified object is equal to the expected one. When it is not equal, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult Equal<T>(this ValidationResult r, string key, T expected, T value, string? message = null) Parameters r ValidationResult The validation result. key string The key to associate the error with. expected T The expected value for the object. value T The object to check. message string An optional error message. Returns ValidationResult The validation result. Type Parameters T Remarks It is recommended to specify a custom error message via the message parameter, because the default one contains neither the expected value nor the checked one. NonNull<T>(ValidationResult, string, T?, string?) Ensures that the specified object is not null. When it is, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult NonNull<T>(this ValidationResult r, string key, T? value, string? message = null) where T : struct Parameters r ValidationResult The validation result. key string The key to associate the error with. value T? The object to check. message string An optional error message. Returns ValidationResult The validation result. Type Parameters T NonNull<T>(ValidationResult, string, T?, string?) Ensures that the specified object is not null. When it is, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult NonNull<T>(this ValidationResult r, string key, T? value, string? message = null) where T : class Parameters r ValidationResult The validation result. key string The key to associate the error with. value T The object to check. message string An optional error message. Returns ValidationResult The validation result. Type Parameters T NotEqual<T>(ValidationResult, string, T, T, string?) Ensures that the specified object is not equal to the forbidden one. When it is equal, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult NotEqual<T>(this ValidationResult r, string key, T forbidden, T value, string? message = null) Parameters r ValidationResult The validation result. key string The key to associate the error with. forbidden T The forbidden value for the object. value T The object to check. message string An optional error message. Returns ValidationResult The validation result. Type Parameters T Remarks It is recommended to specify a custom error message via the message parameter, because the default one does not contain the forbidden value. Null<T>(ValidationResult, string, T?, string?) Ensures that the specified object is null. When it is not, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult Null<T>(this ValidationResult r, string key, T? value, string? message = null) where T : struct Parameters r ValidationResult The validation result. key string The key to associate the error with. value T? The object to check. message string An optional error message. Returns ValidationResult The validation result. Type Parameters T Null<T>(ValidationResult, string, T?, string?) Ensures that the specified object is null. When it is not, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult Null<T>(this ValidationResult r, string key, T? value, string? message = null) where T : class Parameters r ValidationResult The validation result. key string The key to associate the error with. value T The object to check. message string An optional error message. Returns ValidationResult The validation result. Type Parameters T"
  },
  "api/Admonish.StringValidationExtensions.html": {
    "href": "api/Admonish.StringValidationExtensions.html",
    "title": "Class StringValidationExtensions | Admonish validation library",
    "keywords": "Class StringValidationExtensions Namespace Admonish Assembly Admonish.dll Contains string validation extension methods of ValidationResult. public static class StringValidationExtensions Inheritance object StringValidationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods LengthBetween(ValidationResult, string, string?, int, int, string?) Ensures that the length of the specified string is within the specified range (inclusive). When the check fails, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult LengthBetween(this ValidationResult r, string key, string? value, int minLength, int maxLength, string? message = null) Parameters r ValidationResult The validation result. key string The key to associate the error with. value string The string to check. minLength int The minimum allowed length. maxLength int The maximum allowed length. message string An optional error message. Returns ValidationResult The validation result. Matches(ValidationResult, string, string?, Regex, string?) Ensures that the specified string matches the specified regular expression. When the check fails, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult Matches(this ValidationResult r, string key, string? value, Regex regex, string? message = null) Parameters r ValidationResult The validation result. key string The key to associate the error with. value string The string to check. regex Regex The regular expression the value must match to pass validation. message string An optional error message. Returns ValidationResult The validation result. NonNullOrEmpty(ValidationResult, string, string?, string?) Ensures that the specified string is not null or empty. When it is, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult NonNullOrEmpty(this ValidationResult r, string key, string? value, string? message = null) Parameters r ValidationResult The validation result. key string The key to associate the error with. value string The string to check. message string An optional error message. Returns ValidationResult The validation result. NonNullOrWhiteSpace(ValidationResult, string, string?, string?) Ensures that the specified string is not null or empty or consists of whitespace characters only. When the check fails, adds an error message to the ValidationResult and associates it with the specified key. public static ValidationResult NonNullOrWhiteSpace(this ValidationResult r, string key, string? value, string? message = null) Parameters r ValidationResult The validation result. key string The key to associate the error with. value string The string to check. message string An optional error message. Returns ValidationResult The validation result."
  },
  "api/Admonish.ValidationException.html": {
    "href": "api/Admonish.ValidationException.html",
    "title": "Class ValidationException | Admonish validation library",
    "keywords": "Class ValidationException Namespace Admonish Assembly Admonish.dll The exception that is thrown when incorrect data are provided to the application. [Serializable] public class ValidationException : Exception, ISerializable Inheritance object Exception ValidationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ValidationException(ValidationResult) Initializes a new instance of the ValidationException class with a specified validation result. public ValidationException(ValidationResult result) Parameters result ValidationResult The object containing error messages. ValidationException(SerializationInfo, StreamingContext) Initializes a new instance of the Exception class with serialized data. protected ValidationException(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo The SerializationInfo that holds the serialized object data about the exception being thrown. context StreamingContext The StreamingContext that contains contextual information about the source or destination. Exceptions ArgumentNullException info is null. SerializationException The class name is null or HResult is zero (0). ValidationException(string) Initializes a new instance of the ValidationException class with a specified error message. protected ValidationException(string message) Parameters message string The error message. Properties Errors The dictionary containing error messages corresponding to parameter names. public IDictionary<string, string[]> Errors { get; } Property Value IDictionary<string, string[]>"
  },
  "api/Admonish.ValidationExtensions.html": {
    "href": "api/Admonish.ValidationExtensions.html",
    "title": "Class ValidationExtensions | Admonish validation library",
    "keywords": "Class ValidationExtensions Namespace Admonish Assembly Admonish.dll Contains convenience methods for ValidationResult. public static class ValidationExtensions Inheritance object ValidationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Check(ValidationResult, bool, string) Ensures that the specified condition is true. When it is false, adds the specified error message to the ValidationResult. public static ValidationResult Check(this ValidationResult r, bool condition, string message) Parameters r ValidationResult The validation result. condition bool The condition to check. message string The error message. Returns ValidationResult The validation result. Check(ValidationResult, string, bool, string) Ensures that the specified condition is true. When it is false, adds the specified error message to the ValidationResult and associates it with the specified key. public static ValidationResult Check(this ValidationResult r, string key, bool condition, string message) Parameters r ValidationResult The validation result. key string The key to associate the error with. condition bool The condition to check. message string The error message. Returns ValidationResult The validation result. Collection<T>(ValidationResult, string, IEnumerable<T>, Func<ValidationResult, T, ValidationResult>) Begins a scope in which a collection is validated and errors are associated with the specified key. public static ValidationResult Collection<T>(this ValidationResult r, string key, IEnumerable<T> value, Func<ValidationResult, T, ValidationResult> validateItem) Parameters r ValidationResult The validation result. key string The key to associate the errors in the scope with. value IEnumerable<T> The collection to validate. validateItem Func<ValidationResult, T, ValidationResult> A callback validating a single item. Returns ValidationResult The validation result. Type Parameters T WithKey(ValidationResult, string, Func<ValidationResult, ValidationResult>) Begins a scope in which all errors are associated with the specified key. public static ValidationResult WithKey(this ValidationResult r, string key, Func<ValidationResult, ValidationResult> validateParameter) Parameters r ValidationResult The validation result. key string The key to associate the errors in the scope with. validateParameter Func<ValidationResult, ValidationResult> A callback with nested error checks. Returns ValidationResult The validation result."
  },
  "api/Admonish.ValidationResult.html": {
    "href": "api/Admonish.ValidationResult.html",
    "title": "Class ValidationResult | Admonish validation library",
    "keywords": "Class ValidationResult Namespace Admonish Assembly Admonish.dll Represents a collection of errors accumulated during validation. public class ValidationResult Inheritance object ValidationResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods DateTimeValidationExtensions.Between(ValidationResult, string, DateTime, DateTime, DateTime, string?) DateTimeValidationExtensions.Between(ValidationResult, string, DateTimeOffset, DateTimeOffset, DateTimeOffset, string?) DateTimeValidationExtensions.Max(ValidationResult, string, DateTime, DateTime, string?) DateTimeValidationExtensions.Max(ValidationResult, string, DateTimeOffset, DateTimeOffset, string?) DateTimeValidationExtensions.Min(ValidationResult, string, DateTime, DateTime, string?) DateTimeValidationExtensions.Min(ValidationResult, string, DateTimeOffset, DateTimeOffset, string?) EnumValidationExtensions.IsDefined<TEnum>(ValidationResult, string, TEnum, string?) NumericValidationExtensions.Between(ValidationResult, string, decimal, decimal, decimal, string?) NumericValidationExtensions.Between(ValidationResult, string, int, int, int, string?) NumericValidationExtensions.Max(ValidationResult, string, decimal, decimal, string?) NumericValidationExtensions.Max(ValidationResult, string, int, int, string?) NumericValidationExtensions.Min(ValidationResult, string, decimal, decimal, string?) NumericValidationExtensions.Min(ValidationResult, string, int, int, string?) ObjectValidationExtensions.Equal<T>(ValidationResult, string, T, T, string?) ObjectValidationExtensions.NonNull<T>(ValidationResult, string, T?, string?) ObjectValidationExtensions.NonNull<T>(ValidationResult, string, T?, string?) ObjectValidationExtensions.NotEqual<T>(ValidationResult, string, T, T, string?) ObjectValidationExtensions.Null<T>(ValidationResult, string, T?, string?) ObjectValidationExtensions.Null<T>(ValidationResult, string, T?, string?) StringValidationExtensions.LengthBetween(ValidationResult, string, string?, int, int, string?) StringValidationExtensions.Matches(ValidationResult, string, string?, Regex, string?) StringValidationExtensions.NonNullOrEmpty(ValidationResult, string, string?, string?) StringValidationExtensions.NonNullOrWhiteSpace(ValidationResult, string, string?, string?) ValidationExtensions.Check(ValidationResult, bool, string) ValidationExtensions.Check(ValidationResult, string, bool, string) ValidationExtensions.Collection<T>(ValidationResult, string, IEnumerable<T>, Func<ValidationResult, T, ValidationResult>) ValidationExtensions.WithKey(ValidationResult, string, Func<ValidationResult, ValidationResult>) Constructors ValidationResult(Func<ValidationResult, Exception>) Initializes a new instance of the ValidationResult class with the specified validation exception factory. public ValidationResult(Func<ValidationResult, Exception> exceptionFactory) Parameters exceptionFactory Func<ValidationResult, Exception> When called, creates an exception to throw when a validation error occurs. Fields NoKey The default key with which errors are associated when no key is specified. public const string NoKey = \"_\" Field Value string Properties Success A flag indicating whether validation was successful. public bool Success { get; } Property Value bool Methods AddError(string) Adds the specified error message to the collection. public ValidationResult AddError(string error) Parameters error string The error message. Returns ValidationResult The validation result. AddError(string, string) Adds the specified error message to the collection and associates it with the specified key. public ValidationResult AddError(string key, string error) Parameters key string The key to associate the error with. error string The error message. Returns ValidationResult The validation result. ThrowIfInvalid() Throws an exception if there were errors during validation. public ValidationResult ThrowIfInvalid() Returns ValidationResult The validation result. ToDictionary() Gets the dictionary of accumulated errors. public IDictionary<string, string[]> ToDictionary() Returns IDictionary<string, string[]> ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Admonish.Validator.html": {
    "href": "api/Admonish.Validator.html",
    "title": "Class Validator | Admonish validation library",
    "keywords": "Class Validator Namespace Admonish Assembly Admonish.dll Creates ValidationResult objects. public static class Validator Inheritance object Validator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create() Creates an object that allows to perform validation via a fluent interface. public static ValidationResult Create() Returns ValidationResult The created ValidationResult. UnsafeConfigureException(Func<ValidationResult, Exception>) Call this once at the application start to throw a custom exception for validation errors. public static void UnsafeConfigureException(Func<ValidationResult, Exception> exceptionFactory) Parameters exceptionFactory Func<ValidationResult, Exception> A callback that takes a ValidationResult as a parameter and creates a custom validation excepton."
  },
  "api/Admonish.html": {
    "href": "api/Admonish.html",
    "title": "Namespace Admonish | Admonish validation library",
    "keywords": "Namespace Admonish Classes DateTimeValidationExtensions Contains date and time related validation extension methods of ValidationResult. EnumValidationExtensions Contains enum-related validation extension methods of ValidationResult. NumericValidationExtensions Contains numeric validation extension methods of ValidationResult. ObjectValidationExtensions Contains object validation extension methods of ValidationResult. StringValidationExtensions Contains string validation extension methods of ValidationResult. ValidationException The exception that is thrown when incorrect data are provided to the application. ValidationExtensions Contains convenience methods for ValidationResult. ValidationResult Represents a collection of errors accumulated during validation. Validator Creates ValidationResult objects."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API reference | Admonish validation library",
    "keywords": "API reference This section pdescribes Admonish classes and their members."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Introduction | Admonish validation library",
    "keywords": "Introduction How to validate parameters of entity methods: using System; using System.Collections.Generic; using System.Text; using Admonish; namespace Domain { public class Entity { public Entity(int age, string? name) { Validator .Create() .Min(nameof(age), age, 0) .NonNullOrWhiteSpace(nameof(name), name) .Check( !(name == \"Dracula\" && age < 100), \"Cannot create such a young vampire.\") .ThrowIfInvalid(); Age = age; Name = name; } public string Name { get; } public int Age { get; } } } If you need additional validation in an app service, for example, you need to check if such an entity already exists in the database, you do it like this: public class AppService { private static Dictionary<string, Entity> _db = new Dictionary<string, Entity>(); internal void AddEntity(CreateEntityDto dto) { Validator .Create() .Check( nameof(dto.Name), !_db.ContainsKey(dto.Name ?? \"\"), \"An entity with this name already exists.\") .ThrowIfInvalid(); var e = new Entity(dto.Age, dto.Name); _db.Add(e.Name, e); } internal int GetCount(int minAge) { return _db.Values.Where(x => x.Age >= minAge).Count(); } } Imagine you have a custom validation exception (defined e.g. in your WebApiUtils library) which you handle with a special middleware. You can configure Admonish to throw the needed excepton type, so that validation errors from domain and application modules are still handled by your middleware without making any changes in it: public class Startup { public Startup(IConfiguration configuration) { Configuration = configuration; } public IConfiguration Configuration { get; } public void ConfigureServices(IServiceCollection services) { services.AddControllers(); services.AddTransient<AppService>(); // Throw a custom exception on validation // errors that is handled by ErrorHandlerMiddleware. Admonish.Validator.UnsafeConfigureException( r => new CustomValidationException(r.ToDictionary())); } public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); } else { app.UseHsts(); } // Convert the custom validation exception to a 400 response. app.UseMiddleware<ErrorHandlerMiddleware>(); app.UseHttpsRedirection(); app.UseRouting(); app.UseAuthentication(); app.UseAuthorization(); app.UseEndpoints(endpoints => { endpoints.MapControllers(); }); } } The middleware code could look like this. public class ErrorHandlerMiddleware { private readonly RequestDelegate _next; private static readonly RouteData EmptyRouteData = new RouteData(); private static readonly ActionDescriptor EmptyActionDescriptor = new ActionDescriptor(); public ErrorHandlerMiddleware(RequestDelegate next) { _next = next; } public async Task InvokeAsync(HttpContext context) { try { await _next(context); } catch (CustomValidationException ve) { var details = new ValidationProblemDetails(ve.Errors) { Type = \"urn:acme-corp:validation-error\" }; await WriteError(context, details); } } private Task WriteError(HttpContext context, object error) { RouteData routeData = context.GetRouteData() ?? EmptyRouteData; var actionContext = new ActionContext(context, routeData, EmptyActionDescriptor); var result = new ObjectResult(error) { StatusCode = StatusCodes.Status400BadRequest }; return result.ExecuteResultAsync(actionContext); } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "Admonish | Admonish validation library",
    "keywords": "Admonish A simple validation library for app services and domain entities. Github repository Usage See introduction. Motivation Sometimes validation logic is duplicated in application services, where a special kind of exception is thrown that is converted to a 400 HTTP response, and in domain entities, where preconditions are checked according to the usual OOP practice to keep the class state consistent. An ArgumentException or a sublcass of it is usually thrown in this case. The idea behind this library is to throw that \"special kind of exception\" from entities without referring to it explicitly, allowing one to remove duplication and keep entity-related validation only in entities. Highlights Focus on primitive values Because in domain entities one doesn't usually have access to DTOs Admonish is focused on validating privitive values, not DTOs, unlike most other libraries. Although some methods are provided to validate complex objects, such usage is discouraged. Error accumulation Admonish accumulates errors until ThrowIfInvalid() is called. This is in contrast to the approach taken in some other libraries that throw an exception immediately on the first error encounterd. Extensibility Users can write their own extension methods to the ValidationResult class to create custom named validation rules, e.g. CheckCreditCard. Customization Users can substitute the type of exception thrown on validation errors (see the UnsafeConfigureException method) making domain validation code throw a custom exception (defined e.g. in a web infrastructure library) without \"knowing\" about it. Simplicity The code and the API of the library are kept as simple as possible."
  }
}